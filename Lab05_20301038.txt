#----1.a)----
def factorial(x):
    if x==1:
        return 1
    else:
        return x*factorial(x-1)
print(factorial(int(input())))

#----1.b)----
def Fibonacci(index):
    if index < 0:
        raise IndexError
    elif index == 2 or index == 3:
        return 1
    # elif index==1 or index ==2:
    #     return 1
    else:
        return Fibonacci(index - 1) + Fibonacci(index - 2)
        #  f(5)        +      f(4)
        # f(4) + f(3)    +    f(3)+f(2)
    #  f(3)+f(3) +f(3)  +    f(3)+f(2)
print(Fibonacci(6))
# 1 2 3 4 5 6 7 8
# 0 1 1 2 3 5 8 13
# 0 1 2 3 4 5 6 7

#----1.c)----
def array(lst, i = None):
    if i is None:
        i = 0
    if i-1 == len(lst)-1:
        return ''
    print(lst[i],end=" ")
    i += 1
    array(lst,i)
array([1,3,4,5])


#----1.d)----
def powerN(base,n):
    if n==0:
        return 1
    else:
        return base*powerN(base,n-1)
#              3*3*3*3*1
print(powerN(3,4))

#----2.a)----
def convert(number):
    key = False
    if number==0:
        return "0"
    if number<0:
        key=True
        number=-number
    if number == 1:
        return "1"
    else:
        if key==True:
            return "-"+convert(number // 2) + str(-number % 2)
        return convert(number // 2) + str(-number % 2)
print(convert(int(input())))

#----2.b)----

class Node:
    def __init__(self, e):
        self.elem = e
        self.next = None
class LinkedList:
    def __init__(self, a):
        self.head = None
        tail = None
        for i in a:
            t = Node(i)
            if self.head is None:
                self.head = t
                tail = t
            else:
                tail.next = t
                tail = t
list=[1,2,3,4,5,6,7,8,9,10]
l1=LinkedList(list)
head=l1.head
def sum(head):
    if head.next == None:
        return head.elem
    else:
        return head.elem+ sum(head.next)
print(sum(head))

#----2.c)----
class Node:
    def __init__(self, e):
        self.elem = e
        self.next = None
class LinkedList:
    def __init__(self, a):
        self.head = None
        tail = None
        for i in a:
            t = Node(i)
            if self.head is None:
                self.head = t
                tail = t
            else:
                tail.next = t
                tail = t
list=[10,20,30,40,50]
l1=LinkedList(list)
head=l1.head
def reverse(head):
    if head==None:
        return ""
    else:
        # print(head.elem,end=" ") #10 20 30 40 50
        print(head.elem , reverse(head.next),end="") # 50  40  30  20  10
        # reverse(head.next)
        # print(head.elem)
        return ""
print(reverse(head))


#----Task-3----

def hocBuilder(height,card=5):
    if height < 0:
        raise ValueError('Enter valid height!')
    if height==1:
        card=8
        return card
    else:
        return card+hocBuilder(height-1)
#               5 + 5 +8 
print(hocBuilder(3))

#----4.a)----

def pattern(level):
    if level==0:
        return
    else:
        pattern(level - 1)
        print(level,end=" ")
def hard(input):
    if input==0:
        return
    else:
        hard(input-1)
        pattern(input)
        print()
hard(int(input()))

#----4.b)----



def pattern(level):
    if level==0:
        return ""
    else:
        x=str(level)+pattern(level - 1)
        return x
def hard(input,c=0):
    if input==0:
        return
    else:
        hard(input-1,c+1)
        x=c*" "+pattern(input)
        print(x)
hard(int(input()))


#----5----


class FinalQ:
    def print(self, array, idx):
        if (idx < len(array)):
            profit = self.calcProfit(array[idx])
            # ans=str(idx+1)+"."+str(profit)+"; Profit: "+profit+".0"
            # print(ans)
            print(str(idx+1)+".","Investment:",str(array[idx])+";",str(profit)+".0")
        else:
            return
        return self.print(array, idx + 1)

    def calcProfit(self, investment):
        if 100000 >= investment > 25000:
            return 45 + self.calcProfit(investment - 1000)
        elif investment <= 25000:
            return 0
        elif investment > 100000:
            return 80 + self.calcProfit(investment - 1000)

array = [25000, 100000, 250000, 350000]
f = FinalQ()
f.print(array, 0)

# Output:
# 1. Investment: 25000; Profit: 0.0
# 2. Investment: 100000; Profit: 3375.0
# 3. Investment: 250000; Profit: 15375.0
# 4. Investment: 350000; Profit: 23375.0




